Index: app/src/main/res/layout/dialog_select_rapat.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:layout_marginHorizontal=\"20dp\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_marginBottom=\"10dp\"\r\n            app:cardBackgroundColor=\"@color/blue_btn_bg_color\"\r\n            app:cardCornerRadius=\"6dp\">\r\n\r\n            <Spinner\r\n                android:id=\"@+id/spRapat\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:backgroundTint=\"@android:color/white\" />\r\n\r\n        </androidx.cardview.widget.CardView>\r\n    </LinearLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_select_rapat.xml	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/res/layout/dialog_select_rapat.xml	(date 1611928222458)
@@ -15,7 +15,7 @@
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:layout_marginBottom="10dp"
-            app:cardBackgroundColor="@color/blue_btn_bg_color"
+            app:cardBackgroundColor="@color/colorPrimary"
             app:cardCornerRadius="6dp">
 
             <Spinner
Index: app/src/main/java/com/sabo/monaksi/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sabo.monaksi;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.graphics.Typeface;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.ferfalk.simplesearchview.SimpleSearchView;\r\nimport com.ferfalk.simplesearchview.SimpleSearchViewListener;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.ontbee.legacyforks.cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport com.sabo.monaksi.API.APIRequestData;\r\nimport com.sabo.monaksi.ActionKeputusan.TambahKeputusanActivity;\r\nimport com.sabo.monaksi.Common.Common;\r\nimport com.sabo.monaksi.Common.Preferences;\r\nimport com.sabo.monaksi.EventBus.HideAllContentHeader;\r\nimport com.sabo.monaksi.EventBus.HideFab;\r\nimport com.sabo.monaksi.EventBus.HideSearchMenu;\r\nimport com.sabo.monaksi.EventBus.HideStatusContentHeader;\r\nimport com.sabo.monaksi.EventBus.RefreshLoadData;\r\nimport com.sabo.monaksi.EventBus.RefreshUpdated;\r\nimport com.sabo.monaksi.EventBus.SearchQuery;\r\nimport com.sabo.monaksi.EventBus.SpinnerStatusMonitoring;\r\nimport com.sabo.monaksi.Model.RapatModel;\r\nimport com.sabo.monaksi.Model.ResponseModel;\r\nimport com.sabo.monaksi.Model.SubrapatModel;\r\n\r\nimport org.greenrobot.eventbus.EventBus;\r\nimport org.greenrobot.eventbus.Subscribe;\r\nimport org.greenrobot.eventbus.ThreadMode;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\r\n\r\n    private AppBarConfiguration mAppBarConfiguration;\r\n    private Toolbar toolbar;\r\n    private FloatingActionButton fab;\r\n    private NavigationView navigationView;\r\n    private DrawerLayout drawer;\r\n    private NavController navController;\r\n    private APIRequestData mService;\r\n\r\n    /**\r\n     * Profile Header\r\n     */\r\n    private TextView tvNama, tvLevel;\r\n\r\n    /**\r\n     * Content Header\r\n     */\r\n    private LinearLayout contentHeader, contentMain;\r\n    private CardView contentHeaderStatus;\r\n\r\n    /**\r\n     * Search Menu\r\n     */\r\n    private SimpleSearchView simpleSearchView;\r\n    private boolean isHideMenu;\r\n\r\n    /**\r\n     * Spinner Rapat & Subrapat Aktif\r\n     */\r\n    private TextView tvSelectRapat, tvRapatAktif;\r\n    private Spinner spSubrapat;\r\n    private int idSubrapat = 0;\r\n    private String resultNamaRapat, resultNamaSubrapat;\r\n\r\n    /**\r\n     * Spinner Status Monitoring\r\n     */\r\n    private Spinner spStatusMonitoring;\r\n\r\n    /**\r\n     * TypeFace font-family\r\n     */\r\n    private Typeface tfRegular, tfLight;\r\n    private MenuItem menuSearch;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mService = Common.getAPI();\r\n\r\n        initViews();\r\n        initViewsUser(navigationView);\r\n\r\n        /** Passing each menu ID as a set of Ids because each\r\n         * menu should be considered as top level destinations.\r\n         */\r\n        mAppBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.nav_dashboard, R.id.nav_list, R.id.nav_task, R.id.nav_approval, R.id.nav_verifikasi,\r\n                R.id.nav_profile)\r\n                .setDrawerLayout(drawer)\r\n                .build();\r\n        navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);\r\n        NavigationUI.setupWithNavController(navigationView, navController);\r\n    }\r\n\r\n    private void initViewsUser(NavigationView navigationView) {\r\n        View headerView = navigationView.getHeaderView(0);\r\n        tvNama = headerView.findViewById(R.id.tvNamaHeader);\r\n        tvLevel = headerView.findViewById(R.id.tvLevelHeader);\r\n\r\n        tvNama.setText(Preferences.getNama(this));\r\n        tvLevel.setText(Preferences.getLevel(this));\r\n\r\n        Common.getIDJabatan(this);\r\n    }\r\n\r\n    private void initViews() {\r\n        tfRegular = Typeface.createFromAsset(getAssets(), \"OpenSans-Regular.ttf\");\r\n        tfLight = Typeface.createFromAsset(getAssets(), \"OpenSans-Light.ttf\");\r\n\r\n        toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n        fab = findViewById(R.id.fab);\r\n        drawer = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n\r\n        contentHeader = findViewById(R.id.contentHeader);\r\n        contentHeaderStatus = findViewById(R.id.contentHeaderStatus);\r\n        contentMain = findViewById(R.id.contentMain);\r\n        simpleSearchView = findViewById(R.id.simpleSearchView);\r\n\r\n        tvSelectRapat = findViewById(R.id.tvSelectRapat);\r\n        tvRapatAktif = findViewById(R.id.tvRapatAktif);\r\n        spSubrapat = findViewById(R.id.spSubrapat);\r\n        spStatusMonitoring = findViewById(R.id.spStatusMonitoring);\r\n        tvRapatAktif.setTypeface(tfLight);\r\n\r\n        /** Search Event */\r\n        simpleSearchView.setOnSearchViewListener(new SimpleSearchViewListener() {\r\n            @Override\r\n            public void onSearchViewClosedAnimation() {\r\n                Animation slideToBottom = AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_to_bottom);\r\n                Animation slideToBottomHalf = AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_to_bottom_half);\r\n                contentHeader.setAnimation(slideToBottom);\r\n                contentMain.setAnimation(slideToBottomHalf);\r\n                contentHeader.setVisibility(View.VISIBLE);\r\n                EventBus.getDefault().postSticky(new SearchQuery(false, \"\"));\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n                    dismissKeyboardShortcutsHelper();\r\n                }\r\n                super.onSearchViewClosedAnimation();\r\n            }\r\n\r\n            @Override\r\n            public void onSearchViewShown() {\r\n                Animation slideToTop = AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_to_top);\r\n                Animation slideToTopHalf = AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_to_top_half);\r\n                contentHeader.setAnimation(slideToTop);\r\n                contentMain.setAnimation(slideToTopHalf);\r\n                new Handler().postDelayed(() -> {\r\n                    contentHeader.setVisibility(View.GONE);\r\n                }, 400);\r\n                super.onSearchViewShown();\r\n            }\r\n        });\r\n        simpleSearchView.setOnQueryTextListener(new SimpleSearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String query) {\r\n                startSearchByQuery(query);\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String newText) {\r\n                startSearchByQuery(newText);\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextCleared() {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        /** Spinner Status Monitoring Event */\r\n        ArrayAdapter adapter = ArrayAdapter.createFromResource(this, R.array.status_monitoring_list, R.layout.spinner_transparent);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spStatusMonitoring.setAdapter(adapter);\r\n        spStatusMonitoring.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String status = String.valueOf(parent.getItemAtPosition(position));\r\n                EventBus.getDefault().postSticky(new SpinnerStatusMonitoring(true, status));\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n                EventBus.getDefault().postSticky(new SpinnerStatusMonitoring(false, \"\"));\r\n            }\r\n        });\r\n\r\n        /** Default Gone spinner SubRapat */\r\n        spSubrapat.setVisibility(View.GONE);\r\n\r\n        /** Event Click Listener */\r\n        fab.setOnClickListener(this);\r\n        tvSelectRapat.setOnClickListener(this);\r\n    }\r\n\r\n    private void startSearchByQuery(String query) {\r\n        EventBus.getDefault().postSticky(new SearchQuery(true, query));\r\n        Log.d(\"query\", query);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        getMenuInflater().inflate(R.menu.search, menu);\r\n        menuSearch = menu.findItem(R.id.actionSearch);\r\n\r\n        if (isHideMenu)\r\n            menuSearch.setVisible(false);\r\n        else\r\n            menuSearch.setVisible(true);\r\n\r\n        simpleSearchView.setMenuItem(menuSearch);\r\n\r\n        return super.onCreateOptionsMenu(menu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (simpleSearchView.onBackPressed()) {\r\n            EventBus.getDefault().postSticky(new SearchQuery(false, \"\"));\r\n            return;\r\n        }\r\n        super.onBackPressed();\r\n    }\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n        return NavigationUI.navigateUp(navController, mAppBarConfiguration)\r\n                || super.onSupportNavigateUp();\r\n    }\r\n\r\n    /**\r\n     * Menu FeedBack/BugReport\r\n     */\r\n    public void menuFeedback(MenuItem item) {\r\n        drawer.closeDrawers();\r\n        Common.showMenuFeedback(this);\r\n    }\r\n\r\n    /**\r\n     * Menu Logout\r\n     */\r\n    public void menuLogout(MenuItem item) {\r\n        drawer.closeDrawers();\r\n        Common.showMenuLogout(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        EventBus.getDefault().register(this);\r\n        Common.updateStatusUser(this, \"on\");\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        simpleSearchView.closeSearch();\r\n        Common.updateStatusUser(this, \"off\");\r\n        EventBus.getDefault().unregister(this);\r\n        super.onStop();\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public void onHideStatusContentHeader(HideStatusContentHeader event) {\r\n        if (event.isHidden())\r\n            contentHeaderStatus.setVisibility(View.GONE);\r\n        else\r\n            contentHeaderStatus.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public void onHideAllContentHeader(HideAllContentHeader event) {\r\n        if (event.isAllHidden())\r\n            contentHeader.setVisibility(View.GONE);\r\n        else\r\n            contentHeader.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public void onHideSearchMenu(HideSearchMenu event) {\r\n        isHideMenu = event.isHidden();\r\n        if (event.isHidden())\r\n            menuSearch.setVisible(false);\r\n        else\r\n            menuSearch.setVisible(true);\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public void onHideFab(HideFab event) {\r\n        if (event.isHidden())\r\n            fab.hide();\r\n        else\r\n            fab.show();\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public void onRefreshProfile(RefreshUpdated event) {\r\n        if (event.isProfileUpdated()) {\r\n            initViewsUser(navigationView);\r\n            event.setProfileUpdated(false);\r\n        }\r\n\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public void onResetSelectesStatusMonitoring(SpinnerStatusMonitoring event) {\r\n        if (!event.isSelected())\r\n            spStatusMonitoring.setSelection(0);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()) {\r\n            case R.id.tvSelectRapat:\r\n                dialogSelectRapat();\r\n                break;\r\n            case R.id.fab:\r\n                if (idSubrapat == 0)\r\n                    new SweetAlertDialog(MainActivity.this, SweetAlertDialog.WARNING_TYPE)\r\n                            .setTitleText(\"Info!\")\r\n                            .setContentText(\"Silahkan Pilih Rapat terelebih dahulu!\")\r\n                            .show();\r\n                else {\r\n                    Common.namaRapat = resultNamaRapat;\r\n                    Common.namaSubrapat = resultNamaSubrapat;\r\n                    Common.idSubrapat = idSubrapat;\r\n                    startActivity(new Intent(this, TambahKeputusanActivity.class));\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dialog Select\r\n     */\r\n    private void dialogSelectRapat() {\r\n        SweetAlertDialog sweetLoading = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);\r\n        sweetLoading.getProgressHelper().setBarColor(getResources().getColor(R.color.colorPrimary));\r\n        sweetLoading.setTitleText(\"Please wait...\").show();\r\n\r\n        List<String> rapatList = new ArrayList<>();\r\n        mService.getRapatAktif(Preferences.getIDJabatan(getBaseContext()))\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful() && response.body().getAllRapat() != null) {\r\n                            for (RapatModel rapat : response.body().getAllRapat()) {\r\n                                String namaRapat = rapat.getNama_rapat();\r\n                                rapatList.add(namaRapat);\r\n                            }\r\n\r\n                            View view = LayoutInflater.from(MainActivity.this).inflate(R.layout.dialog_select_rapat, null);\r\n                            Spinner spRapat = view.findViewById(R.id.spRapat);\r\n\r\n                            SweetAlertDialog sweetSelectRapat = new SweetAlertDialog(MainActivity.this, SweetAlertDialog.NORMAL_TYPE)\r\n                                    .setTitleText(\"Pilih Rapat\")\r\n                                    .setConfirmText(\"Choose\")\r\n                                    .showContentText(false)\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        String selectedRapat = spRapat.getSelectedItem().toString();\r\n                                        tvSelectRapat.setText(selectedRapat);\r\n\r\n                                        /** Get ID Subrapat */\r\n                                        getIDRapat(selectedRapat, sweetAlertDialog);\r\n                                    });\r\n                            sweetSelectRapat.setCanceledOnTouchOutside(true);\r\n                            sweetSelectRapat.setOnShowListener(dialog -> {\r\n                                ArrayAdapter<String> adapterRapat = new ArrayAdapter<>(MainActivity.this,\r\n                                        R.layout.spinner_white, rapatList);\r\n                                adapterRapat.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n                                spRapat.setAdapter(adapterRapat);\r\n                            });\r\n                            sweetSelectRapat.show();\r\n                            LinearLayout linearLayout = sweetSelectRapat.findViewById(R.id.loading);\r\n                            int index = linearLayout.indexOfChild(linearLayout.findViewById(R.id.content_text));\r\n                            linearLayout.setPadding(0, 0, 0, 50);\r\n                            linearLayout.addView(view, index + 1);\r\n\r\n                            sweetLoading.dismissWithAnimation();\r\n                        } else\r\n                            sweetLoading\r\n                                    .setTitleText(\"Oops!\")\r\n                                    .setContentText(\"Anda tidak memiliki role, Silahkan hubungi ADMIN!\")\r\n                                    .setConfirmText(\"Close\")\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        if (t.toString().contains(\"timeout\"))\r\n                            sweetLoading.setTitleText(\"Oops!\")\r\n                                    .setContentText(t.getMessage())\r\n                                    .setConfirmText(getResources().getString(R.string.textClose))\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        sweetAlertDialog.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n\r\n                        else if (t.toString().contains(\"Unable to resolve host\"))\r\n                            sweetLoading.setTitleText(\"Oops!\")\r\n                                    .setContentText(getResources().getString(R.string.noConnection))\r\n                                    .setConfirmText(getResources().getString(R.string.textClose))\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        sweetAlertDialog.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n                        else\r\n                            sweetLoading.setTitleText(\"Oops!\")\r\n                                    .setContentText(t.getMessage())\r\n                                    .setConfirmText(getResources().getString(R.string.textClose))\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        sweetAlertDialog.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n                    }\r\n                });\r\n\r\n\r\n    }\r\n\r\n    private void getIDRapat(String selectedRapat, SweetAlertDialog sweetAlertDialog) {\r\n        mService.getIdRapat(selectedRapat)\r\n                .enqueue(new Callback<RapatModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<RapatModel> call, Response<RapatModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            RapatModel rapatModel = response.body();\r\n\r\n                            /** Set SubRapat */\r\n                            setSubRapat(rapatModel.getId_rapat(), selectedRapat, sweetAlertDialog);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<RapatModel> call, Throwable t) {\r\n                        new SweetAlertDialog(MainActivity.this, SweetAlertDialog.WARNING_TYPE)\r\n                                .setTitleText(\"Oops!\")\r\n                                .setContentText(t.getMessage())\r\n                                .setConfirmText(\"Close\")\r\n                                .setConfirmClickListener(sweetAlertDialog1 -> {\r\n                                    sweetAlertDialog1.dismissWithAnimation();\r\n                                })\r\n                                .show();\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void setSubRapat(int id_rapat, String selectedRapat, SweetAlertDialog sweetAlertDialog) {\r\n        List<String> subrapatList = new ArrayList<>();\r\n        mService.getSubrapatAktif(Preferences.getIDJabatan(getBaseContext()), id_rapat)\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful() && response.body().getAllSubrapat() != null) {\r\n                            for (SubrapatModel subrapat : response.body().getAllSubrapat()) {\r\n                                String namaSubrapat = subrapat.getNama_subrapat();\r\n                                subrapatList.add(namaSubrapat);\r\n                            }\r\n\r\n                            ArrayAdapter<String> adapter = new ArrayAdapter<>(MainActivity.this,\r\n                                    android.R.layout.simple_spinner_dropdown_item, subrapatList);\r\n                            spSubrapat.setAdapter(adapter);\r\n                            spSubrapat.setVisibility(View.VISIBLE);\r\n\r\n                            /** Set Result Rapat & Subrapat (Rapat Aktif)*/\r\n                            setResultRapatAktif(selectedRapat, id_rapat, sweetAlertDialog);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        new SweetAlertDialog(MainActivity.this, SweetAlertDialog.WARNING_TYPE)\r\n                                .setTitleText(\"Oops!\")\r\n                                .setContentText(t.getMessage())\r\n                                .setConfirmText(\"Close\")\r\n                                .setConfirmClickListener(sweetAlertDialog1 -> {\r\n                                    sweetAlertDialog1.dismissWithAnimation();\r\n                                })\r\n                                .show();\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void setResultRapatAktif(String selectedRapat, int id_rapat, SweetAlertDialog sweetAlertDialog) {\r\n        spSubrapat.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String selectedSubrapat = String.valueOf(parent.getItemAtPosition(position));\r\n\r\n                mService.getIdSubrapat(selectedSubrapat, id_rapat)\r\n                        .enqueue(new Callback<SubrapatModel>() {\r\n                            @Override\r\n                            public void onResponse(Call<SubrapatModel> call, Response<SubrapatModel> response) {\r\n                                if (response.isSuccessful()) {\r\n                                    /**\r\n                                     * TODO RefreshLoadDataEvent (Update Session Subrapat)\r\n                                     * Set Session ID SUBRAPAT\r\n                                     */\r\n                                    SubrapatModel subrapatModel = response.body();\r\n                                    idSubrapat = subrapatModel.getId_subrapat();\r\n                                    String rapatAktif = selectedRapat + \" \" + selectedSubrapat;\r\n                                    /** Send Session Subrapat */\r\n                                    EventBus.getDefault().postSticky(new RefreshLoadData(true, false, idSubrapat, \"\"));\r\n                                    EventBus.getDefault().postSticky(new RefreshLoadData(false, true, idSubrapat, rapatAktif));\r\n\r\n                                    /** Set Result Rapat Aktif */\r\n                                    tvRapatAktif.setText(rapatAktif);\r\n                                    resultNamaRapat = selectedRapat;\r\n                                    resultNamaSubrapat = selectedSubrapat;\r\n\r\n                                    sweetAlertDialog.dismissWithAnimation();\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<SubrapatModel> call, Throwable t) {\r\n                                new SweetAlertDialog(MainActivity.this, SweetAlertDialog.WARNING_TYPE)\r\n                                        .setTitleText(\"Oops!\")\r\n                                        .setContentText(t.getMessage())\r\n                                        .setConfirmText(\"Close\")\r\n                                        .setConfirmClickListener(sweetAlertDialog1 -> {\r\n                                            sweetAlertDialog1.dismissWithAnimation();\r\n                                        })\r\n                                        .show();\r\n                            }\r\n                        });\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/sabo/monaksi/MainActivity.java	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/java/com/sabo/monaksi/MainActivity.java	(date 1611928179209)
@@ -1,7 +1,6 @@
 package com.sabo.monaksi;
 
 import android.content.Intent;
-import android.graphics.Color;
 import android.graphics.Typeface;
 import android.os.Build;
 import android.os.Bundle;
@@ -15,6 +14,7 @@
 import android.view.animation.AnimationUtils;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
+import android.widget.Button;
 import android.widget.LinearLayout;
 import android.widget.Spinner;
 import android.widget.TextView;
@@ -416,7 +416,9 @@
                             });
                             sweetSelectRapat.show();
                             LinearLayout linearLayout = sweetSelectRapat.findViewById(R.id.loading);
+                            Button confirm = sweetSelectRapat.findViewById(R.id.confirm_button);
                             int index = linearLayout.indexOfChild(linearLayout.findViewById(R.id.content_text));
+                            confirm.setBackground(getResources().getDrawable(R.drawable.button_background_custom));
                             linearLayout.setPadding(0, 0, 0, 50);
                             linearLayout.addView(view, index + 1);
 
Index: app/src/main/res/drawable/accent_button_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <item android:state_pressed=\"true\">\r\n        <shape android:shape=\"rectangle\">\r\n            <solid android:color=\"@color/colorPrimaryDark\" />\r\n            <corners android:radius=\"6dp\"/>\r\n        </shape>\r\n    </item>\r\n    <item>\r\n        <shape android:shape=\"rectangle\">\r\n            <solid android:color=\"@color/colorAccent\" />\r\n            <corners android:radius=\"6dp\"/>\r\n        </shape>\r\n    </item>\r\n</selector>
===================================================================
--- app/src/main/res/drawable/accent_button_background.xml	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/res/drawable/button_background_custom.xml	(date 1611928177542)
@@ -8,7 +8,7 @@
     </item>
     <item>
         <shape android:shape="rectangle">
-            <solid android:color="@color/colorAccent" />
+            <solid android:color="@color/colorPrimary" />
             <corners android:radius="6dp"/>
         </shape>
     </item>
Index: app/src/main/java/com/sabo/monaksi/Common/Common.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sabo.monaksi.Common;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.graphics.Typeface;\r\nimport android.net.Uri;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.cardview.widget.CardView;\r\n\r\nimport com.ontbee.legacyforks.cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport com.sabo.monaksi.API.APIRequestData;\r\nimport com.sabo.monaksi.API.RetrofitClient;\r\nimport com.sabo.monaksi.EventBus.RefreshLoadData;\r\nimport com.sabo.monaksi.EventBus.SpinnerStatusMonitoring;\r\nimport com.sabo.monaksi.LoginActivity;\r\nimport com.sabo.monaksi.MainActivity;\r\nimport com.sabo.monaksi.Model.JabatanModel;\r\nimport com.sabo.monaksi.Model.MonitoringModel;\r\nimport com.sabo.monaksi.Model.ResponseModel;\r\nimport com.sabo.monaksi.R;\r\n\r\nimport org.greenrobot.eventbus.EventBus;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.Locale;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.github.mikephil.charting.utils.ColorTemplate.rgb;\r\n\r\npublic class Common {\r\n    /**\r\n     * Key SharedPreferences\r\n     */\r\n    public static final String SF_ID_USER = \"idUser\";\r\n    public static final String SF_USERNAME = \"username\";\r\n    public static final String SF_NAMA = \"nama\";\r\n    public static final String SF_LEVEL = \"level\";\r\n    public static final String SF_EMAIL = \"email\";\r\n    public static final String SF_LAST_LOGIN = \"lastLogin\";\r\n    public static final String SF_ID_JABATAN = \"idJabatan\";\r\n    public static final String SF_LOGGED_IN = \"loggedIn\";\r\n    /**\r\n     * Request Code\r\n     */\r\n    public static final int REQUEST_PERMISSION_UPLOAD = 100;\r\n    public static final int REQUEST_PERMISSION_DOWNLOAD = 101;\r\n    public static final int PICK_FILE_REQUEST = 10;\r\n    public static final int MAX_SIZE_UPLOAD = (1024 * 1024) * 5; // 5 MB\r\n    /**\r\n     * Color of Pie Chart\r\n     */\r\n    public static final int[] COLOR_STATUS_MON = {\r\n            colorStatus0(), colorStatus1(), colorStatus2(), colorStatus3(), colorStatus4(), colorStatus5()\r\n    };\r\n    /**\r\n     * BASE URL HOSTING / LocalHost\r\n     */\r\n    private static final String BASE_URL = \"https://monaksi-v001.000webhostapp.com/android/monaksi/\";\r\n    public static final String DOWNLOAD_URL = \"https://monaksi-v001.000webhostapp.com/android/monaksi/assets/\";\r\n\r\n//    private static final String BASE_URL = \"http://192.168.1.3/Android/Monaksi/\";\r\n//    public static final String DOWNLOAD_URL = \"http://192.168.1.3/Android/Monaksi/assets/\";\r\n\r\n    /**\r\n     * Default Spinner Global\r\n     */\r\n    public static String selectDefault = \"-- Pilih Default --\";\r\n    /**\r\n     * Selected List Item\r\n     */\r\n    public static MonitoringModel selectedMonitoring;\r\n    public static String namaRapat;\r\n    public static String namaSubrapat;\r\n    public static int idSubrapat;\r\n    private static final APIRequestData mService = getAPI();\r\n\r\n    /**\r\n     * Create API Request Data\r\n     */\r\n    public static APIRequestData getAPI() {\r\n        return RetrofitClient.getInstance(BASE_URL).create(APIRequestData.class);\r\n    }\r\n\r\n    /**\r\n     * API WhatsApp\r\n     */\r\n    public static String getAPIWhatsApp(Context context) {\r\n        return \"https://api.whatsapp.com/send?phone=\" + context.getResources().getString(R.string.maction_phone) + \"&text=Aplikasi%20M-Action-Android%20UIKSBS\";\r\n    }\r\n\r\n    /**\r\n     * Color Status Pie Chart\r\n     */\r\n    public static int colorStatus0() {\r\n        return rgb(\"DD4B39\");\r\n    }\r\n\r\n    public static int colorStatus1() {\r\n        return rgb(\"D2D6DE\");\r\n    }\r\n\r\n    public static int colorStatus2() {\r\n        return rgb(\"F39C12\");\r\n    }\r\n\r\n    public static int colorStatus3() {\r\n        return rgb(\"14A2BA\");\r\n    }\r\n\r\n    public static int colorStatus4() {\r\n        return rgb(\"00C0EF\");\r\n    }\r\n\r\n    public static int colorStatus5() {\r\n        return rgb(\"39CCCC\");\r\n    }\r\n\r\n    /**\r\n     * Convert Format Status Monitoring from Int to String\r\n     */\r\n    public static String formatStatusMonitoringToString(int lastStatus) {\r\n        switch (lastStatus) {\r\n            case 0:\r\n                return \"Revisi\";\r\n            case 1:\r\n                return \"Belum Dikerjakan\";\r\n            case 2:\r\n                return \"On Progress\";\r\n            case 3:\r\n                return \"Selesai\";\r\n            case 4:\r\n                return \"Approved\";\r\n            case 5:\r\n                return \"Verified\";\r\n            default:\r\n                return \"Unknown\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert Format Status Monitoring from String to Int\r\n     */\r\n    public static int formatStatusMonitoringToInt(String lastStatus) {\r\n        switch (lastStatus) {\r\n            case \"Revisi\":\r\n                return 0;\r\n            case \"Belum Dikerjakan\":\r\n                return 1;\r\n            case \"On Progress\":\r\n                return 2;\r\n            case \"Selesai\":\r\n                return 3;\r\n            case \"Approved\":\r\n                return 4;\r\n            case \"Verified\":\r\n                return 5;\r\n            case \"Backlog\":\r\n                return 6;\r\n            case \"-\":\r\n                return 1000;\r\n            default:\r\n                return 999;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert Format Level User from Int to String\r\n     */\r\n    public static String formatLevel(int level) {\r\n        switch (level) {\r\n            case 0:\r\n                return \"-\";\r\n            case 1:\r\n                return \"Admin\";\r\n            case 2:\r\n                return \"User\";\r\n            case 3:\r\n                return \"Operator\";\r\n            case 4:\r\n                return \"Viewer\";\r\n            default:\r\n                return \"Unknown\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert Format Tanggal from \"yyyy-MM-dd\" to \"dd-MM-yyyy\"\r\n     */\r\n    public static String formatTgl(String tgl) {\r\n        SimpleDateFormat inputFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        SimpleDateFormat outputFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n        Date date;\r\n        String result = null;\r\n\r\n        try {\r\n            date = inputFormat.parse(tgl);\r\n            result = outputFormat.format(date);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get ID Jabatan for Session ID Jabatan\r\n     */\r\n    public static void getIDJabatan(Context context) {\r\n        int IDUser = Preferences.getIDUser(context);\r\n        SweetAlertDialog sweetLoading = new SweetAlertDialog(context, SweetAlertDialog.PROGRESS_TYPE);\r\n        sweetLoading.getProgressHelper().setBarColor(context.getResources().getColor(R.color.colorPrimary));\r\n        sweetLoading.setTitleText(\"Loading\").setCancelable(false);\r\n        sweetLoading.show();\r\n\r\n        /** ID Jabatan */\r\n        mService.getJabatanByIdUser(IDUser)\r\n                .enqueue(new Callback<JabatanModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<JabatanModel> call, Response<JabatanModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            JabatanModel jabatanModel = response.body();\r\n\r\n                            /** Set Session ID JABATAN */\r\n                            Preferences.setIDJabatan(context, jabatanModel.getId_jabatan());\r\n                            sweetLoading.dismissWithAnimation();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<JabatanModel> call, Throwable t) {\r\n                        if (t.toString().contains(\"timeout\"))\r\n                            sweetLoading.setTitleText(\"Oops!\")\r\n                                    .setContentText(t.getMessage())\r\n                                    .setConfirmText(context.getString(R.string.textClose))\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        sweetAlertDialog.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n                        else if (t.toString().contains(\"Unable to resolve host\"))\r\n                            sweetLoading.setTitleText(\"Oops!\")\r\n                                    .setContentText(context.getString(R.string.noConnection))\r\n                                    .setConfirmText(context.getString(R.string.textClose))\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        sweetAlertDialog.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n                        else\r\n                            sweetLoading.setTitleText(\"Oops!\")\r\n                                    .setContentText(t.getMessage())\r\n                                    .setConfirmText(context.getString(R.string.textClose))\r\n                                    .setConfirmClickListener(sweetAlertDialog -> {\r\n                                        sweetAlertDialog.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * Show Detail Status Monitoring\r\n     */\r\n    public static void showDetailStatusMonitoring(Context context) {\r\n        View view = LayoutInflater.from(context).inflate(R.layout.dialog_info_status, null);\r\n        SweetAlertDialog sweetInfoStatus = new SweetAlertDialog(context, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\r\n                .setCustomImage(R.drawable.logo_pln)\r\n                .setTitleText(context.getString(R.string.titleDialogInfoStatus))\r\n                .setContentText(context.getString(R.string.contentInfoStatus))\r\n                .setConfirmText(context.getString(R.string.textClose));\r\n        sweetInfoStatus.setCanceledOnTouchOutside(true);\r\n        sweetInfoStatus.show();\r\n\r\n        LinearLayout linearLayout = sweetInfoStatus.findViewById(R.id.loading);\r\n        linearLayout.setGravity(Gravity.CENTER);\r\n        TextView title = sweetInfoStatus.findViewById(R.id.title_text);\r\n        TextView content = sweetInfoStatus.findViewById(R.id.content_text);\r\n        title.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));\r\n        title.setTextColor(context.getResources().getColor(android.R.color.black));\r\n        content.setTextSize(12);\r\n        int index = linearLayout.indexOfChild(linearLayout.findViewById(R.id.content_text));\r\n        linearLayout.addView(view, index + 1);\r\n    }\r\n\r\n    /**\r\n     * Show Menu Feedback\r\n     */\r\n    public static void showMenuFeedback(Context context) {\r\n        View view = LayoutInflater.from(context).inflate(R.layout.dialog_feedback, null);\r\n        TextView tvPhone, tvEmail;\r\n        tvPhone = view.findViewById(R.id.tvPhone);\r\n        tvEmail = view.findViewById(R.id.tvEmail);\r\n        SweetAlertDialog sweetFeedBack = new SweetAlertDialog(context, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\r\n                .setTitleText(context.getString(R.string.titleDialogFeedback))\r\n                .setCustomImage(context.getDrawable(R.drawable.ic_round_bug_report_black))\r\n                .setContentText(context.getResources().getString(R.string.content_feedback))\r\n                .setConfirmText(context.getString(R.string.textClose));\r\n        sweetFeedBack.setOnShowListener(dialog -> {\r\n            tvPhone.setText(\"+\" + context.getResources().getString(R.string.maction_phone));\r\n            tvPhone.setOnClickListener(v -> {\r\n                context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(getAPIWhatsApp(context))));\r\n            });\r\n\r\n            tvEmail.setText(context.getResources().getString(R.string.maction_gmail));\r\n            tvEmail.setOnClickListener(v -> {\r\n                Intent i = new Intent(Intent.ACTION_SEND);\r\n                i.setType(\"plain/text\");\r\n                i.putExtra(Intent.EXTRA_EMAIL, new String[]{context.getResources().getString(R.string.maction_gmail)});\r\n                i.putExtra(Intent.EXTRA_SUBJECT, context.getResources().getString(R.string.subjectGmail));\r\n                if (i.resolveActivity(context.getPackageManager()) != null) {\r\n                    context.startActivity(Intent.createChooser(i, \"Choose Gmail\"));\r\n                }\r\n            });\r\n        });\r\n        sweetFeedBack.setCanceledOnTouchOutside(true);\r\n        sweetFeedBack.show();\r\n        LinearLayout linearLayout = sweetFeedBack.findViewById(R.id.loading);\r\n        int index = linearLayout.indexOfChild(linearLayout.findViewById(R.id.content_text));\r\n        linearLayout.addView(view, index + 1);\r\n    }\r\n\r\n    /**\r\n     * Show Menu Logout\r\n     */\r\n    public static void showMenuLogout(Context context) {\r\n        new SweetAlertDialog(context, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\r\n                .setCustomImage(context.getDrawable(R.drawable.ic_round_logout_custom))\r\n                .setTitleText(context.getString(R.string.titleDialogLogout))\r\n                .setContentText(context.getString(R.string.contentLogout))\r\n                .showCancelButton(true)\r\n                .setCancelText(\"Tidak\")\r\n                .setCancelClickListener(sweetAlertDialog -> {\r\n                    sweetAlertDialog.dismissWithAnimation();\r\n                })\r\n                .setConfirmText(\"Ya\")\r\n                .setConfirmClickListener(sweetAlertDialog -> {\r\n                    logout(context, sweetAlertDialog);\r\n                })\r\n                .show();\r\n    }\r\n\r\n    private static void logout(Context context, SweetAlertDialog sweetAlertDialog) {\r\n        sweetAlertDialog.showCancelButton(false);\r\n        sweetAlertDialog.showContentText(false);\r\n        sweetAlertDialog.getProgressHelper().setBarColor(context.getResources().getColor(R.color.colorPrimary));\r\n        sweetAlertDialog.setTitleText(\"Please wait...\").changeAlertType(SweetAlertDialog.PROGRESS_TYPE);\r\n\r\n\r\n        String lastLogin = Preferences.getLastLogin(context);\r\n        int idUser = Preferences.getIDUser(context);\r\n\r\n\r\n        mService.updateStatusUser(\"off\", lastLogin, idUser)\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            insertLogAction(context, \"Logout\", \"\");\r\n\r\n                            sweetAlertDialog.dismissWithAnimation();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        sweetAlertDialog.setTitleText(\"Oops\")\r\n                                .setContentText(t.getMessage())\r\n                                .setConfirmText(\"Close\")\r\n                                .changeAlertType(SweetAlertDialog.WARNING_TYPE);\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * Update Status User (OnStop | OnStart) in MainActivity\r\n     */\r\n    public static void updateStatusUser(Context context, String aksi) {\r\n        String waktu = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault()).format(new Date());\r\n        int idUser = Preferences.getIDUser(context);\r\n        Preferences.setLastLogin(context, waktu);\r\n\r\n        mService.updateStatusUser(aksi, waktu, idUser)\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            Log.d(\"updateStatusUser\", response.body().getMessage());\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        Log.d(\"updateStatusUser\", t.getMessage());\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * Log User\r\n     * - Login\r\n     *      Logout, Login, Login - gagal\r\n     *\r\n     * - Profile ()\r\n     *      Password User, Update Profile User\r\n     *\r\n     * - List (List Adapter)\r\n     *      Tambah, Edit, Hapus & Lihat Keputusan\r\n     *\r\n     * - Task\r\n     *      Update Task, Send To Approval\r\n     *\r\n     * - Approval\r\n     *      Revisi Task, Approve\r\n     *\r\n     * - Verifikasi\r\n     *      Revisi Task, Verified\r\n     */\r\n\r\n    /**\r\n     * Show Usages (Ctrl + insertLogAction (*click))\r\n     */\r\n    public static void insertLogAction(Context context, String aksi, String nip) {\r\n        String nama;\r\n        String waktu = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\",\r\n                Locale.getDefault()).format(new Date());\r\n\r\n        if (nip.equals(\"\"))\r\n            nama = Preferences.getUsername(context); /** Other */\r\n        else\r\n            nama = nip; /** Login Activity*/\r\n\r\n        mService.insertLOGUser(nama, aksi, waktu)\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            Log.d(\"LogUser\", aksi + \" - \" + response.body().getMessage());\r\n                            if (aksi.equals(\"Login\")) {\r\n                                context.startActivity(new Intent(context, MainActivity.class));\r\n                                ((Activity) context).finish();\r\n                                Toast.makeText(context, \"Login Berhasil\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                            if (aksi.equals(\"Logout\")) {\r\n                                context.startActivity(new Intent(context, LoginActivity.class));\r\n                                ((Activity) context).finish();\r\n                                Preferences.clearSharePreferences(context);\r\n                                EventBus.getDefault().postSticky(new RefreshLoadData(false, false, 0, \"\"));\r\n                                EventBus.getDefault().postSticky(new SpinnerStatusMonitoring(false, \"\"));\r\n                            }\r\n                            if (aksi.contains(\"Download Chart\")) {\r\n                                new SweetAlertDialog(context, SweetAlertDialog.SUCCESS_TYPE)\r\n                                        .setTitleText(\"Saving Successfully!\")\r\n                                        .setContentText(\"Checked on your gallery.\")\r\n                                        .setConfirmText(context.getResources().getString(R.string.textClose))\r\n                                        .show();\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        Log.d(\"LogUser\", t.getMessage());\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * checkColor Status Monitoring for Adapter\r\n     */\r\n    public static void checkColorStatus(Context context, String status, CardView cvColorStatus, View vColorStatus, TextView tvStatus) {\r\n        switch (status) {\r\n            case \"Revisi\": {\r\n                cvColorStatus.setCardBackgroundColor(Common.colorStatus0());\r\n                vColorStatus.setBackground(context.getDrawable(R.color.colorStatus0));\r\n                tvStatus.setTextColor(Color.WHITE);\r\n            }\r\n            break;\r\n            case \"Belum Dikerjakan\": {\r\n                cvColorStatus.setCardBackgroundColor(Common.colorStatus1());\r\n                vColorStatus.setBackground(context.getDrawable(R.color.colorStatus1));\r\n                tvStatus.setTextColor(Color.BLACK);\r\n            }\r\n            break;\r\n            case \"On Progress\": {\r\n                cvColorStatus.setCardBackgroundColor(Common.colorStatus2());\r\n                vColorStatus.setBackground(context.getDrawable(R.color.colorStatus2));\r\n                tvStatus.setTextColor(Color.WHITE);\r\n            }\r\n            break;\r\n            case \"Selesai\": {\r\n                cvColorStatus.setCardBackgroundColor(Common.colorStatus3());\r\n                vColorStatus.setBackground(context.getDrawable(R.color.colorStatus3));\r\n                tvStatus.setTextColor(Color.WHITE);\r\n            }\r\n            break;\r\n            case \"Approved\": {\r\n                cvColorStatus.setCardBackgroundColor(Common.colorStatus4());\r\n                vColorStatus.setBackground(context.getDrawable(R.color.colorStatus4));\r\n                tvStatus.setTextColor(Color.WHITE);\r\n            }\r\n            break;\r\n            case \"Verified\": {\r\n                cvColorStatus.setCardBackgroundColor(Common.colorStatus5());\r\n                vColorStatus.setBackground(context.getDrawable(R.color.colorStatus5));\r\n                tvStatus.setTextColor(Color.WHITE);\r\n            }\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Text Color Status in List Fragment\r\n     */\r\n    public static void colorTextStatus(Context context, String queryStatusSelected, TextView tvStatusMonitoring) {\r\n        switch (queryStatusSelected) {\r\n            case \"Belum Dikerjakan\":\r\n            case \"Backlog\": {\r\n                tvStatusMonitoring.setTextColor(Color.BLACK);\r\n            }\r\n            break;\r\n            case \"On Progress\": {\r\n                tvStatusMonitoring.setTextColor(context.getResources().getColor(R.color.colorStatus2));\r\n            }\r\n            break;\r\n            case \"Selesai\": {\r\n                tvStatusMonitoring.setTextColor(context.getResources().getColor(R.color.colorStatus3));\r\n            }\r\n            break;\r\n            case \"Approved\": {\r\n                tvStatusMonitoring.setTextColor(context.getResources().getColor(R.color.colorStatus4));\r\n            }\r\n            break;\r\n            case \"Verified\": {\r\n                tvStatusMonitoring.setTextColor(context.getResources().getColor(R.color.colorStatus5));\r\n            }\r\n            break;\r\n            case \"Revisi\" :{\r\n                tvStatusMonitoring.setTextColor(context.getResources().getColor(R.color.colorStatus0));\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check Last Status monitoring in Detail Keputusan\r\n     */\r\n    public static void checkDetails(Context context, MonitoringModel selectedMonitoring, TextView tvRencanaAksi,\r\n                                    TextView tvTglSelesai, TextView tvTglApproved, TextView tvTglClosed, TextView tvKeteranganKomentar,\r\n                                    TextView tvStatus, TextView tvLampiran, CardView cvDownload) {\r\n\r\n        /** Last status -> tgl Selesai, Approved, Verifikasi*/\r\n        switch (selectedMonitoring.getLAST_STATUS()) {\r\n            case 0: {\r\n                tvStatus.setTextColor(context.getResources().getColor(R.color.colorStatus0));\r\n                tvTglSelesai.setText(context.getResources().getString(R.string.blmSelesai));\r\n                tvTglApproved.setText(context.getResources().getString(R.string.blmApproved));\r\n                tvTglClosed.setText(context.getResources().getString(R.string.blmVerifikasi));\r\n            }\r\n            break;\r\n            case 1: {\r\n                tvStatus.setTextColor(Color.BLACK);\r\n                tvTglSelesai.setText(context.getResources().getString(R.string.blmSelesai));\r\n                tvTglApproved.setText(context.getResources().getString(R.string.blmApproved));\r\n                tvTglClosed.setText(context.getResources().getString(R.string.blmVerifikasi));\r\n            }\r\n            break;\r\n            case 2: {\r\n                tvStatus.setTextColor(context.getResources().getColor(R.color.colorStatus2));\r\n                tvTglSelesai.setText(context.getResources().getString(R.string.blmSelesai));\r\n                tvTglApproved.setText(context.getResources().getString(R.string.blmApproved));\r\n                tvTglClosed.setText(context.getResources().getString(R.string.blmVerifikasi));\r\n            }\r\n            break;\r\n            case 3: {\r\n                tvStatus.setTextColor(context.getResources().getColor(R.color.colorStatus3));\r\n                tvTglSelesai.setText(formatTgl(selectedMonitoring.getTGL_SELESAI()));\r\n                tvTglApproved.setText(context.getResources().getString(R.string.blmApproved));\r\n                tvTglClosed.setText(context.getResources().getString(R.string.blmVerifikasi));\r\n            }\r\n            break;\r\n            case 4: {\r\n                tvStatus.setTextColor(context.getResources().getColor(R.color.colorStatus4));\r\n                tvTglSelesai.setText(formatTgl(selectedMonitoring.getTGL_SELESAI()));\r\n                tvTglApproved.setText(formatTgl(selectedMonitoring.getTGL_APPROVAL()));\r\n                tvTglClosed.setText(context.getResources().getString(R.string.blmVerifikasi));\r\n            }\r\n            break;\r\n            case 5: {\r\n                tvStatus.setTextColor(context.getResources().getColor(R.color.colorStatus5));\r\n                tvTglSelesai.setText(formatTgl(selectedMonitoring.getTGL_SELESAI()));\r\n                tvTglApproved.setText(formatTgl(selectedMonitoring.getTGL_APPROVAL()));\r\n                tvTglClosed.setText(formatTgl(selectedMonitoring.getTGL_CLOSED()));\r\n            }\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n        tvStatus.setText(formatStatusMonitoringToString(selectedMonitoring.getLAST_STATUS()));\r\n\r\n        /** Rencana Aksi */\r\n        String rencanaAksi = selectedMonitoring.getRENCANA_AKSI();\r\n        if (rencanaAksi.equals(\"\") || TextUtils.isEmpty(rencanaAksi) || rencanaAksi.equals(context.getResources().getString(R.string.blmAdaRencanaAksi)))\r\n            tvRencanaAksi.setText(context.getResources().getString(R.string.blmAdaRencanaAksi));\r\n        else\r\n            tvRencanaAksi.setText(selectedMonitoring.getRENCANA_AKSI());\r\n\r\n        /** Keterangan / Komentar */\r\n        String komentar = selectedMonitoring.getKOMENTAR();\r\n        if (komentar.equals(\"\") || komentar.equals(\"Tidak ada komentar\"))\r\n            tvKeteranganKomentar.setText(context.getResources().getString(R.string.komentarEmpty));\r\n        else\r\n            tvKeteranganKomentar.setText(selectedMonitoring.getKOMENTAR());\r\n\r\n        /** Lampiran */\r\n        String lampiran = selectedMonitoring.getLAMPIRAN();\r\n        if (lampiran.equals(\"Tidak ada lampiran\")) {\r\n            tvLampiran.setText(context.getResources().getString(R.string.lampiranEmpty));\r\n            cvDownload.setVisibility(View.GONE);\r\n        } else {\r\n            tvLampiran.setText(lampiran);\r\n            cvDownload.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Check Color Status for TextView in UpdateKeputusan\r\n     */\r\n    public static int colorStatusMonitoringUpdateKeputusan(Context context, String status) {\r\n        switch (status) {\r\n            case \"Revisi\":\r\n                return context.getResources().getColor(R.color.colorStatus0);\r\n            case \"Belum Dikerjakan\":\r\n                return context.getResources().getColor(android.R.color.black);\r\n            case \"On Progress\":\r\n                return context.getResources().getColor(R.color.colorStatus2);\r\n            case \"Selesai\":\r\n                return context.getResources().getColor(R.color.colorStatus3);\r\n            case \"Approved\":\r\n                return context.getResources().getColor(R.color.colorStatus4);\r\n            case \"Verified\":\r\n                return context.getResources().getColor(R.color.colorStatus5);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/sabo/monaksi/Common/Common.java	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/java/com/sabo/monaksi/Common/Common.java	(date 1611927169731)
@@ -70,11 +70,14 @@
     /**
      * BASE URL HOSTING / LocalHost
      */
-    private static final String BASE_URL = "https://monaksi-v001.000webhostapp.com/android/monaksi/";
-    public static final String DOWNLOAD_URL = "https://monaksi-v001.000webhostapp.com/android/monaksi/assets/";
+//    private static final String BASE_URL = "https://monaksi-v001.000webhostapp.com/android/monaksi/";
+//    public static final String DOWNLOAD_URL = "https://monaksi-v001.000webhostapp.com/android/monaksi/assets/";
 
-//    private static final String BASE_URL = "http://192.168.1.3/Android/Monaksi/";
-//    public static final String DOWNLOAD_URL = "http://192.168.1.3/Android/Monaksi/assets/";
+//    private static final String BASE_URL = "http://192.168.42.206/Android/Monaksi/";
+//    public static final String DOWNLOAD_URL = "http://192.168.42.206/Android/Monaksi/assets/";
+
+    private static final String BASE_URL = "http://192.168.1.4/Android/Monaksi/";
+    public static final String DOWNLOAD_URL = "http://192.168.1.4/Android/Monaksi/assets/";
 
     /**
      * Default Spinner Global
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.sabo.monaksi\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.0'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    testImplementation 'junit:junit:4.13'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-scalars:2.1.0'\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n    implementation 'com.github.thomper:sweet-alert-dialog:1.4.0'\r\n    implementation 'org.greenrobot:eventbus:3.2.0'\r\n    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\r\n    implementation 'com.github.Ferfalk:SimpleSearchView:0.1.5'\r\n    implementation \"com.leinardi.android:speed-dial:3.1.1\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/build.gradle	(date 1610887871779)
@@ -1,4 +1,5 @@
 apply plugin: 'com.android.application'
+apply plugin: 'kotlin-android'
 
 android {
     compileSdkVersion 29
@@ -35,6 +36,7 @@
     implementation 'androidx.navigation:navigation-fragment:2.3.0'
     implementation 'androidx.navigation:navigation-ui:2.3.0'
     implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
+    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
     testImplementation 'junit:junit:4.13'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
Index: app/src/main/res/layout/dialog_ganti_password.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"16dp\">\r\n\r\n    <com.google.android.material.textfield.TextInputLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_marginBottom=\"10dp\"\r\n        android:textColorHint=\"@color/colorAccent\"\r\n        android:layout_height=\"wrap_content\">\r\n\r\n        <EditText\r\n            android:id=\"@+id/etNamaUser\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@+id/tvNamauser\"\r\n            android:enabled=\"false\"\r\n            android:textColor=\"@android:color/black\"\r\n            android:hint=\"Nama User\"\r\n            android:inputType=\"text\" />\r\n\r\n    </com.google.android.material.textfield.TextInputLayout>\r\n\r\n\r\n    <com.google.android.material.textfield.TextInputLayout\r\n        android:id=\"@+id/tilPassword\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:passwordToggleEnabled=\"true\"\r\n        app:passwordToggleTint=\"@color/blue_btn_bg_color\">\r\n\r\n        <EditText\r\n            android:id=\"@+id/etPassword\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:hint=\"Password Baru\"\r\n            android:inputType=\"textPassword\" />\r\n\r\n    </com.google.android.material.textfield.TextInputLayout>\r\n\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_ganti_password.xml	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/res/layout/dialog_ganti_password.xml	(date 1610871100717)
@@ -18,10 +18,8 @@
             android:layout_height="wrap_content"
             android:layout_below="@+id/tvNamauser"
             android:enabled="false"
-            android:textColor="@android:color/black"
             android:hint="Nama User"
             android:inputType="text" />
-
     </com.google.android.material.textfield.TextInputLayout>
 
 
Index: app/src/main/java/com/sabo/monaksi/ui/profile/ProfileFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sabo.monaksi.ui.profile;\r\n\r\nimport androidx.lifecycle.ViewModelProviders;\r\n\r\nimport android.content.res.ColorStateList;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.text.TextUtils;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.ontbee.legacyforks.cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport com.sabo.monaksi.API.APIRequestData;\r\nimport com.sabo.monaksi.Common.Common;\r\nimport com.sabo.monaksi.Common.Preferences;\r\nimport com.sabo.monaksi.EventBus.HideAllContentHeader;\r\nimport com.sabo.monaksi.EventBus.HideFab;\r\nimport com.sabo.monaksi.EventBus.HideSearchMenu;\r\nimport com.sabo.monaksi.EventBus.RefreshUpdated;\r\nimport com.sabo.monaksi.Model.ResponseModel;\r\nimport com.sabo.monaksi.Model.UserModel;\r\nimport com.sabo.monaksi.R;\r\n\r\nimport org.greenrobot.eventbus.EventBus;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class ProfileFragment extends Fragment implements View.OnClickListener {\r\n\r\n    private ProfileViewModel profileViewModel;\r\n    private APIRequestData mService;\r\n    private TextView tvNama, tvUsername, tvEmail, tvLastLogin;\r\n    private Button btnGantiPassword, btnEditProfile;\r\n\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n        profileViewModel =\r\n                ViewModelProviders.of(this).get(ProfileViewModel.class);\r\n        View root = inflater.inflate(R.layout.fragment_profile, container, false);\r\n\r\n        mService = Common.getAPI();\r\n        initViews(root);\r\n\r\n        profileViewModel.getMutableLiveData().observe(this, userModel -> {\r\n            if (userModel != null){\r\n                tvNama.setText(userModel.getNama());\r\n                tvUsername.setText(userModel.getUsername());\r\n                tvEmail.setText(userModel.getEmail());\r\n                tvLastLogin.setText(userModel.getLastLogin());\r\n            }\r\n        });\r\n\r\n        return root;\r\n    }\r\n\r\n    private void loadData() {\r\n        UserModel userModel = new UserModel();\r\n        userModel.setNama(Preferences.getNama(getContext()));\r\n        userModel.setUsername(Preferences.getUsername(getContext()));\r\n        userModel.setEmail(Preferences.getEmail(getContext()));\r\n        userModel.setLastLogin(Preferences.getLastLogin(getContext()));\r\n\r\n        profileViewModel.setMutableLiveData(userModel);\r\n    }\r\n\r\n    private void initViews(View root) {\r\n        tvNama = root.findViewById(R.id.tvNama);\r\n        tvUsername = root.findViewById(R.id.tvUsername);\r\n        tvEmail = root.findViewById(R.id.tvEmail);\r\n        tvLastLogin = root.findViewById(R.id.tvLastLogin);\r\n        btnGantiPassword = root.findViewById(R.id.btnGantiPassword);\r\n        btnEditProfile = root.findViewById(R.id.btnEditProfile);\r\n\r\n        btnGantiPassword.setOnClickListener(this);\r\n        btnEditProfile.setOnClickListener(this);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        EventBus.getDefault().postSticky(new HideAllContentHeader(true));\r\n        EventBus.getDefault().postSticky(new HideSearchMenu(true));\r\n        EventBus.getDefault().postSticky(new HideFab(true));\r\n\r\n        loadData();\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.btnGantiPassword :\r\n                gantiPassword();\r\n                break;\r\n            case R.id.btnEditProfile :\r\n                editProfile();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** Sweet Dialog Edit Profile */\r\n    private void editProfile() {\r\n        View view = LayoutInflater.from(getContext()).inflate(R.layout.dialog_edit_profile, null);\r\n        EditText etNamaUser, etUsername, etEmail;\r\n        etNamaUser = view.findViewById(R.id.etNamaUser);\r\n        etUsername = view.findViewById(R.id.etUsername);\r\n        etEmail = view.findViewById(R.id.etEmail);\r\n        SweetAlertDialog sweetEditProfile = new SweetAlertDialog(getContext(), SweetAlertDialog.CUSTOM_IMAGE_TYPE)\r\n                .setCustomImage(R.drawable.ic_edit)\r\n                .setTitleText(\"Edit Profile\")\r\n                .showCancelButton(false)\r\n                .setCancelText(\"Batal\")\r\n                .setCancelClickListener(sweetAlertDialog -> {\r\n                    sweetAlertDialog.dismissWithAnimation();\r\n                })\r\n                .setConfirmText(\"Simpan\")\r\n                .setConfirmClickListener(sweetAlertDialogMain -> {\r\n                    String nama, username, email, message = \"Tidak boleh kosong!\";\r\n                    nama = etNamaUser.getText().toString();\r\n                    username = etUsername.getText().toString();\r\n                    email = etEmail.getText().toString();\r\n                    if (checkFields(true, etNamaUser, etUsername, etEmail, message)){\r\n                        new SweetAlertDialog(getContext(), SweetAlertDialog.WARNING_TYPE)\r\n                                .setTitleText(\"Edit Profile!\")\r\n                                .setContentText(\"Apakah anda yakin ingin mengubah profile.\")\r\n                                .showCancelButton(true)\r\n                                .setCancelText(\"Cancel\")\r\n                                .setCancelClickListener(sweetAlertDialog -> {\r\n                                    sweetAlertDialog.dismissWithAnimation();\r\n                                })\r\n                                .setConfirmClickListener(sweetAlertDialog -> {\r\n                                    updateProfile(nama, username, email, sweetAlertDialogMain, sweetAlertDialog);\r\n                                })\r\n                                .show();\r\n                    }\r\n                });\r\n        sweetEditProfile.setOnShowListener(dialog -> {\r\n            etNamaUser.setText(Preferences.getNama(getContext()));\r\n            etUsername.setText(Preferences.getUsername(getContext()));\r\n            etEmail.setText(Preferences.getEmail(getContext()));\r\n        });\r\n        sweetEditProfile.show();\r\n        LinearLayout linearLayout = sweetEditProfile.findViewById(R.id.loading);\r\n        linearLayout.setPadding(0, 30 , 0, 50);\r\n        int index = linearLayout.indexOfChild(linearLayout.findViewById(R.id.content_text));\r\n        linearLayout.addView(view, index+1);\r\n    }\r\n\r\n    /** Update Profile */\r\n    private void updateProfile(String nama, String username, String email, SweetAlertDialog sweetAlertDialogMain, SweetAlertDialog sweetAlertDialog) {\r\n        mService.updateProfileUser(nama, username, email, Preferences.getIDUser(getContext()))\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful()){\r\n                            Common.insertLogAction(getContext(), \"Update Profile\", \"\");\r\n                            updatePreferences(nama, username,  email);\r\n                            sweetAlertDialog.setTitleText(\"Success!\")\r\n                                    .setContentText(response.body().getMessage())\r\n                                    .showCancelButton(false)\r\n                                    .setConfirmText(\"Close\")\r\n                                    .setConfirmClickListener(sweetAlertDialog1 -> {\r\n                                        sweetAlertDialog1.dismissWithAnimation();\r\n                                        sweetAlertDialogMain.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        sweetAlertDialog.setTitleText(\"Error!\")\r\n                                .setContentText(t.getMessage())\r\n                                .showCancelButton(false)\r\n                                .setConfirmText(\"Close\")\r\n                                .setConfirmClickListener(sweetAlertDialog1 -> {\r\n                                    sweetAlertDialog1.dismissWithAnimation();\r\n                                })\r\n                                .changeAlertType(SweetAlertDialog.ERROR_TYPE);\r\n                    }\r\n                });\r\n    }\r\n\r\n    /** Update Preferences */\r\n    private void updatePreferences(String nama, String username, String email) {\r\n        tvNama.setText(nama);\r\n        tvUsername.setText(username);\r\n        tvEmail.setText(email);\r\n        Preferences.setNama(getContext(), nama);\r\n        Preferences.setUsername(getContext(), username);\r\n        Preferences.setEmail(getContext(), email);\r\n\r\n        EventBus.getDefault().postSticky(new RefreshUpdated(true, false));\r\n    }\r\n\r\n    /** Check Fields Edit Profile */\r\n    private boolean checkFields(boolean checked, EditText etNamaUser, EditText etUsername, EditText etEmail, String message) {\r\n        if (TextUtils.isEmpty(etNamaUser.getText().toString())){\r\n            checked = false;\r\n            etNamaUser.setError(message);\r\n        }\r\n        if (TextUtils.isEmpty(etUsername.getText().toString())){\r\n            checked = false;\r\n            etUsername.setError(message);\r\n        }\r\n        if (TextUtils.isEmpty(etEmail.getText().toString())){\r\n            checked = false;\r\n            etEmail.setError(message);\r\n        }\r\n        if (!Patterns.EMAIL_ADDRESS.matcher(etEmail.getText().toString()).matches()){\r\n            checked = false;\r\n            etEmail.setError(\"Invalid Email Address!\");\r\n        }\r\n\r\n        return checked;\r\n    }\r\n\r\n    /** Sweet Dialog Ganti Password */\r\n    private void gantiPassword() {\r\n        View view = LayoutInflater.from(getContext()).inflate(R.layout.dialog_ganti_password, null);\r\n        EditText etNamaUser, etPassword;\r\n        TextInputLayout tilPassword;\r\n        etNamaUser = view.findViewById(R.id.etNamaUser);\r\n        etPassword = view.findViewById(R.id.etPassword);\r\n        tilPassword = view.findViewById(R.id.tilPassword);\r\n        SweetAlertDialog sweetGantiPassword = new SweetAlertDialog(getContext(), SweetAlertDialog.CUSTOM_IMAGE_TYPE)\r\n                .setCustomImage(R.drawable.ic_edit)\r\n                .setTitleText(\"Ganti Password\")\r\n                .showCancelButton(false)\r\n                .setCancelText(\"Batal\")\r\n                .setCancelClickListener(sweetAlertDialog -> {\r\n                    sweetAlertDialog.dismissWithAnimation();\r\n                })\r\n                .setConfirmText(\"Simpan\")\r\n                .setConfirmClickListener(sweetAlertDialogMain -> {\r\n                    String password = etPassword.getText().toString();\r\n                    if (password.length() < 6){\r\n                        tilPassword.setHelperTextEnabled(true);\r\n                        tilPassword.setHelperText(\"Minimal 6 digit!\");\r\n                        tilPassword.setHelperTextColor(ColorStateList.valueOf(getResources().getColor(R.color.red_btn_bg_color)));\r\n                    }\r\n                    else {\r\n                        tilPassword.setHelperTextEnabled(false);\r\n                        new SweetAlertDialog(getContext(), SweetAlertDialog.WARNING_TYPE)\r\n                                .setTitleText(\"Ganti Password!\")\r\n                                .setContentText(\"Apakah anda yakin ingin mengganti password.\")\r\n                                .showCancelButton(true)\r\n                                .setCancelText(\"Cancel\")\r\n                                .setCancelClickListener(sweetAlertDialog -> {\r\n                                    sweetAlertDialog.dismissWithAnimation();\r\n                                })\r\n                                .setConfirmClickListener(sweetAlertDialog-> {\r\n                                    updatePassword(password, sweetAlertDialogMain, sweetAlertDialog);\r\n                                })\r\n                                .show();\r\n\r\n                    }\r\n\r\n                });\r\n        sweetGantiPassword.setOnShowListener(dialog -> {\r\n            etNamaUser.setText(Preferences.getNama(getContext()));\r\n        });\r\n        sweetGantiPassword.show();\r\n        LinearLayout linearLayout = sweetGantiPassword.findViewById(R.id.loading);\r\n        linearLayout.setPadding(0, 30 , 0, 50);\r\n        int index = linearLayout.indexOfChild(linearLayout.findViewById(R.id.content_text));\r\n        linearLayout.addView(view, index+1);\r\n    }\r\n\r\n    /** Update Password */\r\n    private void updatePassword(String password, SweetAlertDialog sweetAlertDialogMain, SweetAlertDialog sweetAlertDialog) {\r\n        mService.updatePasswordUser(password, Preferences.getIDUser(getContext()))\r\n                .enqueue(new Callback<ResponseModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {\r\n                        if (response.isSuccessful()){\r\n                            Common.insertLogAction(getContext(), \"Update Password\", \"\");\r\n                            sweetAlertDialog.setTitleText(\"Success!\")\r\n                                    .setContentText(response.body().getMessage())\r\n                                    .showCancelButton(false)\r\n                                    .setConfirmText(\"Close\")\r\n                                    .setConfirmClickListener(sweetAlertDialog1 -> {\r\n                                        sweetAlertDialog1.dismissWithAnimation();\r\n                                        sweetAlertDialogMain.dismissWithAnimation();\r\n                                    })\r\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseModel> call, Throwable t) {\r\n                        sweetAlertDialog.setTitleText(\"Error - Update Password\")\r\n                                .setContentText(t.getMessage())\r\n                                .showCancelButton(false)\r\n                                .changeAlertType(SweetAlertDialog.ERROR_TYPE);\r\n                    }\r\n                });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/sabo/monaksi/ui/profile/ProfileFragment.java	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/java/com/sabo/monaksi/ui/profile/ProfileFragment.java	(date 1610871084560)
@@ -56,7 +56,7 @@
         mService = Common.getAPI();
         initViews(root);
 
-        profileViewModel.getMutableLiveData().observe(this, userModel -> {
+        profileViewModel.getMutableLiveData().observe(getViewLifecycleOwner(), userModel -> {
             if (userModel != null){
                 tvNama.setText(userModel.getNama());
                 tvUsername.setText(userModel.getUsername());
@@ -149,6 +149,7 @@
                     }
                 });
         sweetEditProfile.setOnShowListener(dialog -> {
+            etNamaUser.requestFocus();
             etNamaUser.setText(Preferences.getNama(getContext()));
             etUsername.setText(Preferences.getUsername(getContext()));
             etEmail.setText(Preferences.getEmail(getContext()));
@@ -273,6 +274,7 @@
                 });
         sweetGantiPassword.setOnShowListener(dialog -> {
             etNamaUser.setText(Preferences.getNama(getContext()));
+            etPassword.requestFocus();
         });
         sweetGantiPassword.show();
         LinearLayout linearLayout = sweetGantiPassword.findViewById(R.id.loading);
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>ext {\r\n    sourceCompatibility = JavaVersion.VERSION_1_8\r\n}// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath \"com.android.tools.build:gradle:4.0.1\"\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url \"https://jitpack.io\" }\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ build.gradle	(date 1610887871604)
@@ -2,12 +2,16 @@
     sourceCompatibility = JavaVersion.VERSION_1_8
 }// Top-level build file where you can add configuration options common to all sub-projects/modules.
 buildscript {
+    ext {
+        kotlin_version = '1.4.20'
+    }
     repositories {
         google()
         jcenter()
     }
     dependencies {
         classpath "com.android.tools.build:gradle:4.0.1"
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.sabo.monaksi\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\">\r\n        <activity\r\n            android:name=\".ActionKeputusan.UpdateKeputusanActivity\"\r\n            android:launchMode=\"singleTask\" />\r\n        <activity\r\n            android:name=\".ActionKeputusan.TambahKeputusanActivity\"\r\n            android:launchMode=\"singleTask\" />\r\n        <activity\r\n            android:name=\".ui.verifikasi.DetailVerifikasiActivity\"\r\n            android:launchMode=\"singleTask\" />\r\n        <activity\r\n            android:name=\".ui.task.DetailTaskActivity\"\r\n            android:launchMode=\"singleTask\" />\r\n        <activity\r\n            android:name=\".ui.approval.DetailApprovalActivity\"\r\n            android:launchMode=\"singleTask\" />\r\n        <activity\r\n            android:name=\".ui.list.DetailListActivity\"\r\n            android:launchMode=\"singleTask\" />\r\n        <activity android:name=\".LoginActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:label=\"@string/app_name\"\r\n            android:theme=\"@style/AppTheme.NoActionBar\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 5cba9737f8d45dc2bd0b1783f628d3c3d4023146)
+++ app/src/main/AndroidManifest.xml	(date 1610887872039)
@@ -14,6 +14,7 @@
         android:supportsRtl="true"
         android:theme="@style/AppTheme"
         android:usesCleartextTraffic="true">
+        <activity android:name=".Test"></activity>
         <activity
             android:name=".ActionKeputusan.UpdateKeputusanActivity"
             android:launchMode="singleTask" />
